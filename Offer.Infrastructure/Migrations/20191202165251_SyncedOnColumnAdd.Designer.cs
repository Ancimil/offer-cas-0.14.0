// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Offer.Domain.AggregatesModel.ApplicationAggregate;
using Offer.Infrastructure;

namespace Offer.Infrastructure.Migrations
{
    [DbContext(typeof(OfferDBContext))]
    [Migration("20191202165251_SyncedOnColumnAdd")]
    partial class SyncedOnColumnAdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema(_schema.Schema)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MicroserviceCommon.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("requests", _schema.Schema);
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.Application", b =>
                {
                    b.Property<long>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AmountLimitBreached");

                    b.Property<string>("CampaignCode")
                        .HasMaxLength(128);

                    b.Property<string>("CancelationComment");

                    b.Property<string>("CancelationReason");

                    b.Property<string>("ChannelCode")
                        .HasMaxLength(128);

                    b.Property<string>("CollateralModel")
                        .HasMaxLength(256);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreditRating");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(256);

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(256);

                    b.Property<decimal?>("CustomerRemainingAbilityToPay");

                    b.Property<string>("CustomerSegment")
                        .HasMaxLength(256);

                    b.Property<decimal?>("CustomerValue");

                    b.Property<decimal?>("DebtToIncome");

                    b.Property<string>("DecisionNumber")
                        .HasMaxLength(256);

                    b.Property<decimal?>("EffectiveRemainingAbilityToPay");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Initiator")
                        .HasMaxLength(128);

                    b.Property<bool>("IsPreApproved");

                    b.Property<DateTime?>("LastModified");

                    b.Property<long?>("LeadId");

                    b.Property<decimal?>("LoanToValue");

                    b.Property<decimal?>("MaximalAmount");

                    b.Property<decimal?>("MaximalAnnuity");

                    b.Property<string>("OrganizationUnitCode")
                        .HasMaxLength(64);

                    b.Property<bool?>("OriginatesBundle")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Phase");

                    b.Property<string>("PortfolioId")
                        .HasMaxLength(1024);

                    b.Property<string>("PreApprovalType");

                    b.Property<bool>("PreferencialPrice");

                    b.Property<string>("PrefferedCulture")
                        .HasMaxLength(128);

                    b.Property<string>("ProductCode")
                        .HasMaxLength(128);

                    b.Property<string>("ProductName")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("RequestDate");

                    b.Property<decimal?>("RiskScore");

                    b.Property<string>("SigningOption")
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<DateTime?>("StatusChangeDate");

                    b.Property<bool>("TermLimitBreached");

                    b.Property<string>("_ExposureInfo")
                        .HasColumnName("ExposureInfo");

                    b.Property<string>("_Extended")
                        .HasColumnName("Extended");

                    b.HasKey("ApplicationId");

                    b.HasIndex("OrganizationUnitCode");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.ApplicationDocument", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId");

                    b.Property<int?>("ArrangementRequestId")
                        .HasMaxLength(256);

                    b.Property<string>("CollateralId")
                        .HasMaxLength(256);

                    b.Property<string>("Context")
                        .HasMaxLength(256);

                    b.Property<int>("DocumentContextKind");

                    b.Property<string>("DocumentKind")
                        .HasMaxLength(256);

                    b.Property<string>("DocumentName")
                        .HasMaxLength(256);

                    b.Property<string>("DocumentReviewPeriod")
                        .HasMaxLength(256);

                    b.Property<bool>("IsComposedFromTemplate");

                    b.Property<bool>("IsForPhysicalArchiving");

                    b.Property<bool>("IsForSigning");

                    b.Property<bool>("IsForUpload");

                    b.Property<bool>("IsInternal");

                    b.Property<bool>("IsMandatory");

                    b.Property<int>("Origin");

                    b.Property<long?>("PartyId")
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<bool>("SupportsMultipleFiles");

                    b.Property<string>("TemplateUrl")
                        .HasMaxLength(1024);

                    b.HasKey("DocumentId");

                    b.HasIndex("ApplicationId", "ArrangementRequestId");

                    b.HasIndex("ApplicationId", "PartyId");

                    b.ToTable("application_documents");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.ArrangementRequest", b =>
                {
                    b.Property<long>("ApplicationId");

                    b.Property<int>("ArrangementRequestId");

                    b.Property<int>("ArrangementKind");

                    b.Property<string>("ArrangementNumber")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("CalculationDate");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAbstractOrigin");

                    b.Property<bool?>("IsOptional")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("NumberOfInstallments");

                    b.Property<bool>("OverrideProductLimits");

                    b.Property<string>("ParentProductCode");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("_AcceptedValues");

                    b.Property<string>("_Accounts")
                        .HasColumnName("Accounts");

                    b.Property<string>("_ApprovedLimits");

                    b.Property<string>("_BundleInfo")
                        .HasColumnName("BundleInfo");

                    b.Property<string>("_Campaign");

                    b.Property<string>("_Conditions")
                        .HasColumnName("ArrangementRequestCondition");

                    b.Property<string>("_Extended")
                        .HasColumnName("Extended");

                    b.Property<string>("_InstallmentPlan")
                        .HasColumnName("InstallmentPlan");

                    b.Property<string>("_Options");

                    b.Property<string>("_Periods");

                    b.Property<string>("_ProductSnapshot")
                        .HasColumnName("ProductSnapshot");

                    b.Property<string>("_RequestedValues");

                    b.HasKey("ApplicationId", "ArrangementRequestId");

                    b.ToTable("arrangement_requests");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ArrangementRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.CollateralRequirement", b =>
                {
                    b.Property<long>("ApplicationId");

                    b.Property<int>("ArrangementRequestId");

                    b.Property<long>("CollateralRequirementId");

                    b.Property<decimal>("ActualCoverage");

                    b.Property<string>("CollateralArrangementCode");

                    b.Property<string>("CollateralOwner");

                    b.Property<bool>("FromModel");

                    b.Property<decimal>("MinimalCoverage");

                    b.Property<decimal>("MinimalCoverageInLoanCurrency");

                    b.Property<string>("_SecuredDealLink")
                        .HasColumnName("SecuredDealLink");

                    b.HasKey("ApplicationId", "ArrangementRequestId", "CollateralRequirementId");

                    b.ToTable("collateral_requirements");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.OrganizationUnit", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<string>("Name");

                    b.Property<string>("NavigationCode")
                        .IsRequired();

                    b.Property<string>("ParentCode");

                    b.Property<DateTime>("SyncedOn");

                    b.HasKey("Code");

                    b.ToTable("OrganizationUnits");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.Party", b =>
                {
                    b.Property<long>("ApplicationId");

                    b.Property<long>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryOfResidence");

                    b.Property<string>("CreditRating");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(256);

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(200);

                    b.Property<string>("CustomerSegment")
                        .HasMaxLength(100);

                    b.Property<decimal?>("CustomerValue");

                    b.Property<decimal?>("DebtToIncome");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(64);

                    b.Property<int>("IdentificationNumberKind");

                    b.Property<int>("PartyKind");

                    b.Property<int>("PartyRole");

                    b.Property<string>("PrimarySegment")
                        .HasMaxLength(100);

                    b.Property<string>("ProfileImageUrl");

                    b.Property<decimal?>("RemainingAbilityToPay");

                    b.Property<string>("Username")
                        .HasMaxLength(200);

                    b.Property<string>("_CbData");

                    b.Property<string>("_Extended")
                        .HasColumnName("Extended");

                    b.Property<string>("_IdentificationDocument")
                        .HasColumnName("IdentificationDocument");

                    b.Property<string>("_ProductUsageInfo")
                        .HasColumnName("ProductUsageInfo");

                    b.HasKey("ApplicationId", "PartyId");

                    b.ToTable("parties");

                    b.HasDiscriminator<int>("PartyKind");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.PortfolioChangeRequests", b =>
                {
                    b.Property<long>("PortfolioChangeRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId");

                    b.Property<DateTime>("ChangeRequestTime");

                    b.Property<string>("FinalValue");

                    b.Property<string>("InitialValue");

                    b.Property<string>("RequestDescription");

                    b.Property<string>("RequestedValue");

                    b.Property<int>("Status");

                    b.HasKey("PortfolioChangeRequestId");

                    b.ToTable("portfolio_change_requests");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.Questionnaire", b =>
                {
                    b.Property<long>("ApplicationId");

                    b.Property<string>("QuestionnaireId")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Purpose")
                        .HasMaxLength(256);

                    b.Property<string>("QuestionnaireName")
                        .HasMaxLength(256);

                    b.HasKey("ApplicationId", "QuestionnaireId");

                    b.ToTable("questionnaires");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Questionnaire");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.DepositRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.ArrangementRequest");

                    b.Property<string>("Currency");

                    b.Property<decimal>("Eapr");

                    b.Property<decimal>("Napr");

                    b.HasDiscriminator().HasValue("DepositRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.ElectronicAccessArrangementRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.ArrangementRequest");

                    b.HasDiscriminator().HasValue("ElectronicAccessArrangementRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.FinanceServiceArrangementRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.ArrangementRequest");

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("AmountInDomesticCurrency");

                    b.Property<string>("CollateralModel");

                    b.Property<string>("Currency")
                        .HasColumnName("FinanceServiceArrangementRequest_Currency");

                    b.Property<decimal>("Eapr")
                        .HasColumnName("FinanceServiceArrangementRequest_Eapr");

                    b.Property<decimal?>("LoanToValue");

                    b.Property<DateTime?>("MaturityDate");

                    b.Property<decimal?>("MaximalAmount");

                    b.Property<decimal?>("MaximalAnnuity");

                    b.Property<decimal>("Napr")
                        .HasColumnName("FinanceServiceArrangementRequest_Napr");

                    b.Property<string>("Term");

                    b.Property<string>("_AlternativeOffers");

                    b.HasDiscriminator().HasValue("FinanceServiceArrangementRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.OtherProductArrangementRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.ArrangementRequest");

                    b.HasDiscriminator().HasValue("OtherProductArrangementRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.SecuritiesArrangementRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.ArrangementRequest");

                    b.HasDiscriminator().HasValue("SecuritiesArrangementRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.IndividualParty", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.Party");

                    b.Property<int?>("CarOwnership");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<int?>("EducationLevel");

                    b.Property<int>("Gender");

                    b.Property<string>("GivenName")
                        .HasMaxLength(256);

                    b.Property<int?>("HomeOwnership");

                    b.Property<string>("HomePhoneNumber")
                        .HasMaxLength(256);

                    b.Property<int>("LifecycleStatus");

                    b.Property<string>("MaidenName")
                        .HasMaxLength(256);

                    b.Property<int?>("MaritalStatus");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(256);

                    b.Property<string>("MothersMaidenName")
                        .HasMaxLength(256);

                    b.Property<string>("Occupation")
                        .HasMaxLength(256);

                    b.Property<string>("ParentName")
                        .HasMaxLength(256);

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("ResidentialAddressDate");

                    b.Property<string>("ResidentialStatus")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("ResidentialStatusDate")
                        .HasMaxLength(256);

                    b.Property<string>("Surname")
                        .HasMaxLength(256);

                    b.Property<string>("_EmploymentData")
                        .HasColumnName("EmploymentData");

                    b.Property<string>("_FinancialProfile")
                        .HasColumnName("FinancialProfile");

                    b.Property<string>("_HouseholdInfo")
                        .HasColumnName("HouseholdInfo");

                    b.Property<string>("_Relationships")
                        .HasColumnName("Relationships");

                    b.ToTable("individuals");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.OrganizationParty", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.Party");

                    b.Property<string>("AccountingMethod");

                    b.Property<string>("CommercialName");

                    b.Property<string>("DocumentationStatus");

                    b.Property<DateTime>("Established");

                    b.Property<string>("FileKind");

                    b.Property<string>("IndustrySector");

                    b.Property<bool>("IsSoleTrader");

                    b.Property<string>("LegalBasisForRegistration");

                    b.Property<string>("LegalStatus");

                    b.Property<string>("LegalStructure");

                    b.Property<string>("OrganizationPurpose");

                    b.Property<string>("Phone")
                        .HasMaxLength(256);

                    b.Property<string>("RegisteredName")
                        .HasMaxLength(256);

                    b.Property<string>("Size");

                    b.Property<long?>("SuppliersBuyersReportId");

                    b.Property<string>("_BankAccounts")
                        .HasColumnName("BankAccounts");

                    b.Property<string>("_FinancialStatements")
                        .HasColumnName("FinancialStatements");

                    b.Property<string>("_IdNumbers")
                        .HasColumnName("IdNumbers");

                    b.Property<string>("_OwnershipInfo")
                        .HasColumnName("OwnershipInfo");

                    b.Property<string>("_Relationships")
                        .HasColumnName("Relationships");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.FinancialQuestionnaire", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.Questionnaire");

                    b.Property<string>("_Entries")
                        .HasColumnName("Entries");

                    b.HasDiscriminator().HasValue("FinancialQuestionnaire");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.GenericQuestionnaire", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.Questionnaire");

                    b.Property<string>("_Entries")
                        .HasColumnName("Entries");

                    b.HasDiscriminator().HasValue("GenericQuestionnaire");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.CurrentAccountRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.DepositRequest");

                    b.HasDiscriminator().HasValue("CurrentAccountRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.DemandDepositRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.DepositRequest");

                    b.HasDiscriminator().HasValue("DemandDepositRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.TermDepositRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.DepositRequest");

                    b.Property<decimal>("Amount")
                        .HasColumnName("TermDepositRequest_Amount");

                    b.Property<int>("InterestCapitalizationOnRollover")
                        .HasColumnName("InterestCapOnRollover");

                    b.Property<DateTime?>("MaturityDate")
                        .HasColumnName("TermDepositRequest_MaturityDate");

                    b.Property<int>("MaxRollovers");

                    b.Property<int>("RolloverOption");

                    b.Property<string>("Term")
                        .HasColumnName("TermDepositRequest_Term");

                    b.HasDiscriminator().HasValue("TermDepositRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.CreditCardFacilityRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.FinanceServiceArrangementRequest");

                    b.Property<decimal>("MinimalRepaymentPercentage")
                        .HasColumnName("MinRepPerc");

                    b.Property<decimal>("RevolvingPercentage")
                        .HasColumnName("RevPerc");

                    b.HasDiscriminator().HasValue("CreditCardFacilityRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.CreditFacilityRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.FinanceServiceArrangementRequest");

                    b.Property<decimal>("MinimalRepaymentPercentage")
                        .HasColumnName("MinRepPerc");

                    b.HasDiscriminator().HasValue("CreditFacilityRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.CreditLineRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.FinanceServiceArrangementRequest");

                    b.Property<string>("_CreditLineLimits")
                        .HasColumnName("CreditLineLimits");

                    b.HasDiscriminator().HasValue("CreditLineRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.OverdraftFacilityRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.FinanceServiceArrangementRequest");

                    b.HasDiscriminator().HasValue("OverdraftFacilityRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.TermLoanRequest", b =>
                {
                    b.HasBaseType("Offer.Domain.AggregatesModel.ApplicationAggregate.FinanceServiceArrangementRequest");

                    b.Property<decimal>("Annuity");

                    b.Property<decimal>("DownpaymentAmount");

                    b.Property<decimal>("DownpaymentAmountInLoanCurrency")
                        .HasColumnName("DownpaymentInLoanCurrency");

                    b.Property<decimal?>("DownpaymentPercentage");

                    b.Property<string>("DrawdownPeriod")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("DrawdownPeriodStartDate");

                    b.Property<string>("GracePeriod")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("GracePeriodStartDate");

                    b.Property<decimal>("InvoiceAmount");

                    b.Property<decimal>("InvoiceAmountInLoanCurrency");

                    b.Property<bool>("IsRefinancing")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("RepaymentPeriod")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("RepaymentPeriodStartDate");

                    b.Property<string>("_DisbursementsInfo")
                        .HasColumnName("DisbursementsInfo");

                    b.HasDiscriminator().HasValue("TermLoanRequest");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.Application", b =>
                {
                    b.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.OrganizationUnit", "OrganizationUnit")
                        .WithMany("Applications")
                        .HasForeignKey("OrganizationUnitCode");

                    b.OwnsOne("Offer.Domain.AggregatesModel.ApplicationAggregate.StatusInformation", "StatusInformation", b1 =>
                        {
                            b1.Property<long>("ApplicationId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .HasMaxLength(1024);

                            b1.Property<string>("Html");

                            b1.Property<string>("Title");

                            b1.HasKey("ApplicationId");

                            b1.ToTable("applications", _schema.Schema);

                            b1.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.Application")
                                .WithOne("StatusInformation")
                                .HasForeignKey("Offer.Domain.AggregatesModel.ApplicationAggregate.StatusInformation", "ApplicationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.ApplicationDocument", b =>
                {
                    b.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.Application")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.ArrangementRequest", "ArrangementRequest")
                        .WithMany()
                        .HasForeignKey("ApplicationId", "ArrangementRequestId");

                    b.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.Party", "Party")
                        .WithMany()
                        .HasForeignKey("ApplicationId", "PartyId");
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.ArrangementRequest", b =>
                {
                    b.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.Application", "Application")
                        .WithMany("ArrangementRequests")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.CollateralRequirement", b =>
                {
                    b.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.FinanceServiceArrangementRequest", "ArrangementRequest")
                        .WithMany("CollateralRequirements")
                        .HasForeignKey("ApplicationId", "ArrangementRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.Party", b =>
                {
                    b.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.Application", "Application")
                        .WithMany("InvolvedParties")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Offer.Domain.AggregatesModel.ApplicationAggregate.PostalAddress", "ContactAddress", b1 =>
                        {
                            b1.Property<long>("PartyApplicationId");

                            b1.Property<long>("PartyId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("AddressCode")
                                .HasColumnName("ContactAddr_AddressCode")
                                .HasMaxLength(256);

                            b1.Property<string>("Apartment")
                                .HasMaxLength(256);

                            b1.Property<string>("Country")
                                .HasColumnName("ContactAddr_Country")
                                .HasMaxLength(256);

                            b1.Property<string>("Floor")
                                .HasMaxLength(256);

                            b1.Property<string>("Formatted")
                                .HasColumnName("ContactAddr_Formatted")
                                .HasMaxLength(1024);

                            b1.Property<int?>("Kind")
                                .HasColumnName("ContactAddr_Kind");

                            b1.Property<string>("Locality")
                                .HasColumnName("ContactAddr_Locality")
                                .HasMaxLength(256);

                            b1.Property<string>("PostalCode")
                                .HasColumnName("ContactAddr_PostalCode")
                                .HasMaxLength(10);

                            b1.Property<string>("Street")
                                .HasColumnName("ContactAddr_Street")
                                .HasMaxLength(256);

                            b1.Property<string>("StreetNumber")
                                .HasColumnName("ContactAddr_StreetNumber")
                                .HasMaxLength(50);

                            b1.HasKey("PartyApplicationId", "PartyId");

                            b1.ToTable("parties", _schema.Schema);

                            b1.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.Party")
                                .WithOne("ContactAddress")
                                .HasForeignKey("Offer.Domain.AggregatesModel.ApplicationAggregate.PostalAddress", "PartyApplicationId", "PartyId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Offer.Domain.AggregatesModel.ApplicationAggregate.Coordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<long>("PostalAddressPartyApplicationId");

                                    b2.Property<long>("PostalAddressPartyId")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<double?>("Lat")
                                        .HasColumnName("ContactAddr_Coordinates_Lat");

                                    b2.Property<double?>("Long")
                                        .HasColumnName("ContactAddr_Coordinates_Long");

                                    b2.HasKey("PostalAddressPartyApplicationId", "PostalAddressPartyId");

                                    b2.ToTable("parties", _schema.Schema);

                                    b2.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.PostalAddress")
                                        .WithOne("Coordinates")
                                        .HasForeignKey("Offer.Domain.AggregatesModel.ApplicationAggregate.Coordinates", "PostalAddressPartyApplicationId", "PostalAddressPartyId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("Offer.Domain.AggregatesModel.ApplicationAggregate.PostalAddress", "LegalAddress", b1 =>
                        {
                            b1.Property<long>("PartyApplicationId");

                            b1.Property<long>("PartyId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("AddressCode")
                                .HasColumnName("LegalAddr_AddressCode")
                                .HasMaxLength(256);

                            b1.Property<string>("Apartment")
                                .HasMaxLength(256);

                            b1.Property<string>("Country")
                                .HasColumnName("LegalAddr_Country")
                                .HasMaxLength(256);

                            b1.Property<string>("Floor")
                                .HasMaxLength(256);

                            b1.Property<string>("Formatted")
                                .HasColumnName("LegalAddr_Formatted")
                                .HasMaxLength(1024);

                            b1.Property<int?>("Kind")
                                .HasColumnName("LegalAddr_Kind");

                            b1.Property<string>("Locality")
                                .HasColumnName("LegalAddr_Locality")
                                .HasMaxLength(256);

                            b1.Property<string>("PostalCode")
                                .HasColumnName("LegalAddr_PostalCode")
                                .HasMaxLength(10);

                            b1.Property<string>("Street")
                                .HasColumnName("LegalAddr_Street")
                                .HasMaxLength(256);

                            b1.Property<string>("StreetNumber")
                                .HasColumnName("LegalAddr_StreetNumber")
                                .HasMaxLength(50);

                            b1.HasKey("PartyApplicationId", "PartyId");

                            b1.ToTable("parties", _schema.Schema);

                            b1.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.Party")
                                .WithOne("LegalAddress")
                                .HasForeignKey("Offer.Domain.AggregatesModel.ApplicationAggregate.PostalAddress", "PartyApplicationId", "PartyId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Offer.Domain.AggregatesModel.ApplicationAggregate.Coordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<long>("PostalAddressPartyApplicationId");

                                    b2.Property<long>("PostalAddressPartyId")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<double?>("Lat")
                                        .HasColumnName("LegalAddr_Coordinates_Lat");

                                    b2.Property<double?>("Long")
                                        .HasColumnName("LegalAddr_Coordinates_Long");

                                    b2.HasKey("PostalAddressPartyApplicationId", "PostalAddressPartyId");

                                    b2.ToTable("parties", _schema.Schema);

                                    b2.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.PostalAddress")
                                        .WithOne("Coordinates")
                                        .HasForeignKey("Offer.Domain.AggregatesModel.ApplicationAggregate.Coordinates", "PostalAddressPartyApplicationId", "PostalAddressPartyId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.Questionnaire", b =>
                {
                    b.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.Application")
                        .WithMany("Questionnaires")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.DemandDepositRequest", b =>
                {
                    b.OwnsOne("Offer.Domain.AggregatesModel.ApplicationAggregate.SavingsPlan", "SavingsPlan", b1 =>
                        {
                            b1.Property<long>("DemandDepositRequestApplicationId");

                            b1.Property<int>("DemandDepositRequestArrangementRequestId");

                            b1.Property<decimal>("Amount");

                            b1.Property<string>("Iteration");

                            b1.HasKey("DemandDepositRequestApplicationId", "DemandDepositRequestArrangementRequestId");

                            b1.ToTable("arrangement_requests", _schema.Schema);

                            b1.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.DemandDepositRequest")
                                .WithOne("SavingsPlan")
                                .HasForeignKey("Offer.Domain.AggregatesModel.ApplicationAggregate.SavingsPlan", "DemandDepositRequestApplicationId", "DemandDepositRequestArrangementRequestId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.TermDepositRequest", b =>
                {
                    b.OwnsOne("Offer.Domain.AggregatesModel.ApplicationAggregate.SavingsPlan", "SavingsPlan", b1 =>
                        {
                            b1.Property<long>("TermDepositRequestApplicationId");

                            b1.Property<int>("TermDepositRequestArrangementRequestId");

                            b1.Property<decimal>("Amount")
                                .HasColumnName("SavingsPlan_Amount1");

                            b1.Property<string>("Iteration")
                                .HasColumnName("SavingsPlan_Iteration1");

                            b1.HasKey("TermDepositRequestApplicationId", "TermDepositRequestArrangementRequestId");

                            b1.ToTable("arrangement_requests", _schema.Schema);

                            b1.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.TermDepositRequest")
                                .WithOne("SavingsPlan")
                                .HasForeignKey("Offer.Domain.AggregatesModel.ApplicationAggregate.SavingsPlan", "TermDepositRequestApplicationId", "TermDepositRequestArrangementRequestId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.CreditCardFacilityRequest", b =>
                {
                    b.OwnsOne("MicroserviceCommon.Models.Currency", "MinimalRepaymentAmount", b1 =>
                        {
                            b1.Property<long>("CreditCardFacilityRequestApplicationId");

                            b1.Property<int>("CreditCardFacilityRequestArrangementRequestId");

                            b1.Property<decimal>("Amount")
                                .HasColumnName("MinRepAmount_Amount");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnName("MinRepAmount_Code");

                            b1.HasKey("CreditCardFacilityRequestApplicationId", "CreditCardFacilityRequestArrangementRequestId");

                            b1.ToTable("arrangement_requests", _schema.Schema);

                            b1.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.CreditCardFacilityRequest")
                                .WithOne("MinimalRepaymentAmount")
                                .HasForeignKey("MicroserviceCommon.Models.Currency", "CreditCardFacilityRequestApplicationId", "CreditCardFacilityRequestArrangementRequestId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Offer.Domain.AggregatesModel.ApplicationAggregate.CreditFacilityRequest", b =>
                {
                    b.OwnsOne("MicroserviceCommon.Models.Currency", "MinimalRepaymentAmount", b1 =>
                        {
                            b1.Property<long>("CreditFacilityRequestApplicationId");

                            b1.Property<int>("CreditFacilityRequestArrangementRequestId");

                            b1.Property<decimal>("Amount")
                                .HasColumnName("MinRepAmount_Amount");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnName("MinRepAmount_Code");

                            b1.HasKey("CreditFacilityRequestApplicationId", "CreditFacilityRequestArrangementRequestId");

                            b1.ToTable("arrangement_requests", _schema.Schema);

                            b1.HasOne("Offer.Domain.AggregatesModel.ApplicationAggregate.CreditFacilityRequest")
                                .WithOne("MinimalRepaymentAmount")
                                .HasForeignKey("MicroserviceCommon.Models.Currency", "CreditFacilityRequestApplicationId", "CreditFacilityRequestArrangementRequestId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
